2022-05-31 19:29:28,661 - mmseg - INFO - Multi-processing start method is `None`
2022-05-31 19:29:28,661 - mmseg - INFO - OpenCV num_threads is `<built-in function getNumThreads>
fatal: ambiguous argument 'HEAD': unknown revision or path not in the working tree.
Use '--' to separate paths from revisions, like this:
'git <command> [<revision>...] -- [<file>...]'
2022-05-31 19:29:28,739 - mmseg - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.12 (default, Oct 12 2021, 13:49:34) [GCC 7.5.0]
CUDA available: True
GPU 0,1: Tesla T4
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 10.1, V10.1.16
GCC: gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-36)
PyTorch: 1.7.1
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37
  - CuDNN 7.6.3
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.8.2
OpenCV: 4.5.5
MMCV: 1.5.1
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 10.1
MMSegmentation: 0.24.1+HEAD
------------------------------------------------------------

2022-05-31 19:29:28,740 - mmseg - INFO - Distributed training: False
2022-05-31 19:29:29,033 - mmseg - INFO - Config:
norm_cfg = dict(type='SyncBN', requires_grad=True)
model = dict(
    type='EncoderDecoder',
    pretrained='./pretrain/mae_pretrain_vit_base_mmcls.pth',
    backbone=dict(
        type='MAE',
        img_size=(512, 512),
        patch_size=8,
        in_channels=3,
        embed_dims=196,
        num_layers=12,
        num_heads=12,
        mlp_ratio=4,
        out_indices=[3, 5, 7, 11],
        attn_drop_rate=0.0,
        drop_path_rate=0.1,
        norm_cfg=dict(type='LN', eps=1e-06),
        act_cfg=dict(type='GELU'),
        norm_eval=False,
        init_values=1.0),
    neck=dict(type='Feature2Pyramid', embed_dim=768, rescales=[4, 2, 1, 0.5]),
    decode_head=dict(
        type='UPerHead',
        in_channels=[768, 768, 768, 768],
        in_index=[0, 1, 2, 3],
        pool_scales=(1, 2, 3, 6),
        channels=768,
        dropout_ratio=0.1,
        num_classes=4,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),
    auxiliary_head=dict(
        type='FCNHead',
        in_channels=768,
        in_index=2,
        channels=256,
        num_convs=1,
        concat_input=False,
        dropout_ratio=0.1,
        num_classes=4,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),
    train_cfg=dict(),
    test_cfg=dict(mode='slide', crop_size=(512, 512), stride=(341, 341)))
dataset_type = 'ADE20KDataset'
data_root = 'data/my_dataset'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
crop_size = (512, 512)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', reduce_zero_label=True),
    dict(type='Resize', img_scale=(2048, 512), ratio_range=(0.5, 2.0)),
    dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),
    dict(type='RandomFlip', prob=0.5),
    dict(type='PhotoMetricDistortion'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_semantic_seg'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(2048, 512),
        img_ratios=[0.5, 0.75, 1.0, 1.25, 1.5, 1.75],
        flip=True,
        transforms=[
            dict(type='Resize', keep_ratio=True, min_size=512),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=2,
    workers_per_gpu=1,
    train=dict(
        type='ADE20KDataset',
        data_root='data/my_dataset',
        img_dir='images/training',
        ann_dir='annotations/training',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', reduce_zero_label=True),
            dict(type='Resize', img_scale=(2048, 512), ratio_range=(0.5, 2.0)),
            dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),
            dict(type='RandomFlip', prob=0.5),
            dict(type='PhotoMetricDistortion'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_semantic_seg'])
        ]),
    val=dict(
        type='ADE20KDataset',
        data_root='data/my_dataset',
        img_dir='images/validation',
        ann_dir='annotations/validation',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(2048, 512),
                img_ratios=[0.5, 0.75, 1.0, 1.25, 1.5, 1.75],
                flip=True,
                transforms=[
                    dict(type='Resize', keep_ratio=True, min_size=512),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='ADE20KDataset',
        data_root='data/my_dataset',
        img_dir='images/validation',
        ann_dir='annotations/validation',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(2048, 512),
                img_ratios=[0.5, 0.75, 1.0, 1.25, 1.5, 1.75],
                flip=True,
                transforms=[
                    dict(type='Resize', keep_ratio=True, min_size=512),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
log_config = dict(
    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1), ('val', 1)]
cudnn_benchmark = True
optimizer = dict(
    type='AdamW',
    lr=0.0001,
    betas=(0.9, 0.999),
    weight_decay=0.05,
    constructor='LayerDecayOptimizerConstructor',
    paramwise_cfg=dict(num_layers=12, layer_decay_rate=0.65))
optimizer_config = dict()
lr_config = dict(
    policy='poly',
    warmup='linear',
    warmup_iters=1500,
    warmup_ratio=1e-06,
    power=1.0,
    min_lr=0.0,
    by_epoch=False)
runner = dict(type='IterBasedRunner', max_iters=16000)
checkpoint_config = dict(by_epoch=False, interval=1600)
evaluation = dict(interval=1600, metric='mIoU', pre_eval=True)
fp16 = dict(loss_scale='dynamic')
work_dir = 'upernet_mae-base_my_dataset_work_result4'
gpu_ids = [0]
auto_resume = False

2022-05-31 19:29:29,034 - mmseg - INFO - Set random seed to 1828265155, deterministic: False
/gpfs/home/likai_stu/mmsegmentation/mmseg/models/backbones/beit.py:303: UserWarning: DeprecationWarning: pretrained is deprecated, please use "init_cfg" instead
  warnings.warn('DeprecationWarning: pretrained is deprecated, '
/gpfs/home/likai_stu/mmsegmentation/mmseg/models/losses/cross_entropy_loss.py:235: UserWarning: Default ``avg_non_ignore`` is False, if you would like to ignore the certain label and average loss over non-ignore labels, which is the same with PyTorch official cross_entropy, set ``avg_non_ignore=True``.
  warnings.warn(
2022-05-31 19:29:32,877 - mmseg - INFO - load checkpoint from local path: ./pretrain/mae_pretrain_vit_base_mmcls.pth
2022-05-31 19:29:34,166 - mmseg - WARNING - Error in loading pos_embed, pass
2022-05-31 19:29:34,320 - mmseg - INFO - initialize UPerHead with init_cfg {'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
2022-05-31 19:29:34,912 - mmseg - INFO - initialize FCNHead with init_cfg {'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
tools/train.py:204: UserWarning: SyncBN is only supported with DDP. To be compatible with DP, we convert SyncBN to BN. Please use dist_train.sh which can avoid this error.
  warnings.warn(
2022-05-31 19:29:34,924 - mmseg - INFO - EncoderDecoder(
  (backbone): MAE(
    (patch_embed): PatchEmbed(
      (projection): Conv2d(3, 196, kernel_size=(8, 8), stride=(8, 8))
    )
    (layers): ModuleList(
      (0): MAETransformerEncoderLayer(
        (ln1): LayerNorm((196,), eps=1e-06, elementwise_affine=True)
        (attn): BEiTAttention(
          (qkv): Linear(in_features=196, out_features=588, bias=True)
          (attn_drop): Dropout(p=0.0, inplace=False)
          (proj): Linear(in_features=196, out_features=196, bias=True)
          (proj_drop): Dropout(p=0.0, inplace=False)
        )
        (ln2): LayerNorm((196,), eps=1e-06, elementwise_affine=True)
        (ffn): FFN(
          (activate): GELU()
          (layers): Sequential(
            (0): Sequential(
              (0): Linear(in_features=196, out_features=784, bias=True)
              (1): GELU()
              (2): Dropout(p=0.0, inplace=False)
            )
            (1): Linear(in_features=784, out_features=196, bias=True)
            (2): Dropout(p=0.0, inplace=False)
          )
          (dropout_layer): Identity()
        )
        (drop_path): DropPath()
      )
      (1): MAETransformerEncoderLayer(
        (ln1): LayerNorm((196,), eps=1e-06, elementwise_affine=True)
        (attn): BEiTAttention(
          (qkv): Linear(in_features=196, out_features=588, bias=True)
          (attn_drop): Dropout(p=0.0, inplace=False)
          (proj): Linear(in_features=196, out_features=196, bias=True)
          (proj_drop): Dropout(p=0.0, inplace=False)
        )
        (ln2): LayerNorm((196,), eps=1e-06, elementwise_affine=True)
        (ffn): FFN(
          (activate): GELU()
          (layers): Sequential(
            (0): Sequential(
              (0): Linear(in_features=196, out_features=784, bias=True)
              (1): GELU()
              (2): Dropout(p=0.0, inplace=False)
            )
            (1): Linear(in_features=784, out_features=196, bias=True)
            (2): Dropout(p=0.0, inplace=False)
          )
          (dropout_layer): Identity()
        )
        (drop_path): DropPath()
      )
      (2): MAETransformerEncoderLayer(
        (ln1): LayerNorm((196,), eps=1e-06, elementwise_affine=True)
        (attn): BEiTAttention(
          (qkv): Linear(in_features=196, out_features=588, bias=True)
          (attn_drop): Dropout(p=0.0, inplace=False)
          (proj): Linear(in_features=196, out_features=196, bias=True)
          (proj_drop): Dropout(p=0.0, inplace=False)
        )
        (ln2): LayerNorm((196,), eps=1e-06, elementwise_affine=True)
        (ffn): FFN(
          (activate): GELU()
          (layers): Sequential(
            (0): Sequential(
              (0): Linear(in_features=196, out_features=784, bias=True)
              (1): GELU()
              (2): Dropout(p=0.0, inplace=False)
            )
            (1): Linear(in_features=784, out_features=196, bias=True)
            (2): Dropout(p=0.0, inplace=False)
          )
          (dropout_layer): Identity()
        )
        (drop_path): DropPath()
      )
      (3): MAETransformerEncoderLayer(
        (ln1): LayerNorm((196,), eps=1e-06, elementwise_affine=True)
        (attn): BEiTAttention(
          (qkv): Linear(in_features=196, out_features=588, bias=True)
          (attn_drop): Dropout(p=0.0, inplace=False)
          (proj): Linear(in_features=196, out_features=196, bias=True)
          (proj_drop): Dropout(p=0.0, inplace=False)
        )
        (ln2): LayerNorm((196,), eps=1e-06, elementwise_affine=True)
        (ffn): FFN(
          (activate): GELU()
          (layers): Sequential(
            (0): Sequential(
              (0): Linear(in_features=196, out_features=784, bias=True)
              (1): GELU()
              (2): Dropout(p=0.0, inplace=False)
            )
            (1): Linear(in_features=784, out_features=196, bias=True)
            (2): Dropout(p=0.0, inplace=False)
          )
          (dropout_layer): Identity()
        )
        (drop_path): DropPath()
      )
      (4): MAETransformerEncoderLayer(
        (ln1): LayerNorm((196,), eps=1e-06, elementwise_affine=True)
        (attn): BEiTAttention(
          (qkv): Linear(in_features=196, out_features=588, bias=True)
          (attn_drop): Dropout(p=0.0, inplace=False)
          (proj): Linear(in_features=196, out_features=196, bias=True)
          (proj_drop): Dropout(p=0.0, inplace=False)
        )
        (ln2): LayerNorm((196,), eps=1e-06, elementwise_affine=True)
        (ffn): FFN(
          (activate): GELU()
          (layers): Sequential(
            (0): Sequential(
              (0): Linear(in_features=196, out_features=784, bias=True)
              (1): GELU()
              (2): Dropout(p=0.0, inplace=False)
            )
            (1): Linear(in_features=784, out_features=196, bias=True)
            (2): Dropout(p=0.0, inplace=False)
          )
          (dropout_layer): Identity()
        )
        (drop_path): DropPath()
      )
      (5): MAETransformerEncoderLayer(
        (ln1): LayerNorm((196,), eps=1e-06, elementwise_affine=True)
        (attn): BEiTAttention(
          (qkv): Linear(in_features=196, out_features=588, bias=True)
          (attn_drop): Dropout(p=0.0, inplace=False)
          (proj): Linear(in_features=196, out_features=196, bias=True)
          (proj_drop): Dropout(p=0.0, inplace=False)
        )
        (ln2): LayerNorm((196,), eps=1e-06, elementwise_affine=True)
        (ffn): FFN(
          (activate): GELU()
          (layers): Sequential(
            (0): Sequential(
              (0): Linear(in_features=196, out_features=784, bias=True)
              (1): GELU()
              (2): Dropout(p=0.0, inplace=False)
            )
            (1): Linear(in_features=784, out_features=196, bias=True)
            (2): Dropout(p=0.0, inplace=False)
          )
          (dropout_layer): Identity()
        )
        (drop_path): DropPath()
      )
      (6): MAETransformerEncoderLayer(
        (ln1): LayerNorm((196,), eps=1e-06, elementwise_affine=True)
        (attn): BEiTAttention(
          (qkv): Linear(in_features=196, out_features=588, bias=True)
          (attn_drop): Dropout(p=0.0, inplace=False)
          (proj): Linear(in_features=196, out_features=196, bias=True)
          (proj_drop): Dropout(p=0.0, inplace=False)
        )
        (ln2): LayerNorm((196,), eps=1e-06, elementwise_affine=True)
        (ffn): FFN(
          (activate): GELU()
          (layers): Sequential(
            (0): Sequential(
              (0): Linear(in_features=196, out_features=784, bias=True)
              (1): GELU()
              (2): Dropout(p=0.0, inplace=False)
            )
            (1): Linear(in_features=784, out_features=196, bias=True)
            (2): Dropout(p=0.0, inplace=False)
          )
          (dropout_layer): Identity()
        )
        (drop_path): DropPath()
      )
      (7): MAETransformerEncoderLayer(
        (ln1): LayerNorm((196,), eps=1e-06, elementwise_affine=True)
        (attn): BEiTAttention(
          (qkv): Linear(in_features=196, out_features=588, bias=True)
          (attn_drop): Dropout(p=0.0, inplace=False)
          (proj): Linear(in_features=196, out_features=196, bias=True)
          (proj_drop): Dropout(p=0.0, inplace=False)
        )
        (ln2): LayerNorm((196,), eps=1e-06, elementwise_affine=True)
        (ffn): FFN(
          (activate): GELU()
          (layers): Sequential(
            (0): Sequential(
              (0): Linear(in_features=196, out_features=784, bias=True)
              (1): GELU()
              (2): Dropout(p=0.0, inplace=False)
            )
            (1): Linear(in_features=784, out_features=196, bias=True)
            (2): Dropout(p=0.0, inplace=False)
          )
          (dropout_layer): Identity()
        )
        (drop_path): DropPath()
      )
      (8): MAETransformerEncoderLayer(
        (ln1): LayerNorm((196,), eps=1e-06, elementwise_affine=True)
        (attn): BEiTAttention(
          (qkv): Linear(in_features=196, out_features=588, bias=True)
          (attn_drop): Dropout(p=0.0, inplace=False)
          (proj): Linear(in_features=196, out_features=196, bias=True)
          (proj_drop): Dropout(p=0.0, inplace=False)
        )
        (ln2): LayerNorm((196,), eps=1e-06, elementwise_affine=True)
        (ffn): FFN(
          (activate): GELU()
          (layers): Sequential(
            (0): Sequential(
              (0): Linear(in_features=196, out_features=784, bias=True)
              (1): GELU()
              (2): Dropout(p=0.0, inplace=False)
            )
            (1): Linear(in_features=784, out_features=196, bias=True)
            (2): Dropout(p=0.0, inplace=False)
          )
          (dropout_layer): Identity()
        )
        (drop_path): DropPath()
      )
      (9): MAETransformerEncoderLayer(
        (ln1): LayerNorm((196,), eps=1e-06, elementwise_affine=True)
        (attn): BEiTAttention(
          (qkv): Linear(in_features=196, out_features=588, bias=True)
          (attn_drop): Dropout(p=0.0, inplace=False)
          (proj): Linear(in_features=196, out_features=196, bias=True)
          (proj_drop): Dropout(p=0.0, inplace=False)
        )
        (ln2): LayerNorm((196,), eps=1e-06, elementwise_affine=True)
        (ffn): FFN(
          (activate): GELU()
          (layers): Sequential(
            (0): Sequential(
              (0): Linear(in_features=196, out_features=784, bias=True)
              (1): GELU()
              (2): Dropout(p=0.0, inplace=False)
            )
            (1): Linear(in_features=784, out_features=196, bias=True)
            (2): Dropout(p=0.0, inplace=False)
          )
          (dropout_layer): Identity()
        )
        (drop_path): DropPath()
      )
      (10): MAETransformerEncoderLayer(
        (ln1): LayerNorm((196,), eps=1e-06, elementwise_affine=True)
        (attn): BEiTAttention(
          (qkv): Linear(in_features=196, out_features=588, bias=True)
          (attn_drop): Dropout(p=0.0, inplace=False)
          (proj): Linear(in_features=196, out_features=196, bias=True)
          (proj_drop): Dropout(p=0.0, inplace=False)
        )
        (ln2): LayerNorm((196,), eps=1e-06, elementwise_affine=True)
        (ffn): FFN(
          (activate): GELU()
          (layers): Sequential(
            (0): Sequential(
              (0): Linear(in_features=196, out_features=784, bias=True)
              (1): GELU()
              (2): Dropout(p=0.0, inplace=False)
            )
            (1): Linear(in_features=784, out_features=196, bias=True)
            (2): Dropout(p=0.0, inplace=False)
          )
          (dropout_layer): Identity()
        )
        (drop_path): DropPath()
      )
      (11): MAETransformerEncoderLayer(
        (ln1): LayerNorm((196,), eps=1e-06, elementwise_affine=True)
        (attn): BEiTAttention(
          (qkv): Linear(in_features=196, out_features=588, bias=True)
          (attn_drop): Dropout(p=0.0, inplace=False)
          (proj): Linear(in_features=196, out_features=196, bias=True)
          (proj_drop): Dropout(p=0.0, inplace=False)
        )
        (ln2): LayerNorm((196,), eps=1e-06, elementwise_affine=True)
        (ffn): FFN(
          (activate): GELU()
          (layers): Sequential(
            (0): Sequential(
              (0): Linear(in_features=196, out_features=784, bias=True)
              (1): GELU()
              (2): Dropout(p=0.0, inplace=False)
            )
            (1): Linear(in_features=784, out_features=196, bias=True)
            (2): Dropout(p=0.0, inplace=False)
          )
          (dropout_layer): Identity()
        )
        (drop_path): DropPath()
      )
    )
  )
  init_cfg={'type': 'Pretrained', 'checkpoint': './pretrain/mae_pretrain_vit_base_mmcls.pth'}
  (neck): Feature2Pyramid(
    (upsample_4x): Sequential(
      (0): ConvTranspose2d(768, 768, kernel_size=(2, 2), stride=(2, 2))
      (1): _BatchNormXd(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): GELU()
      (3): ConvTranspose2d(768, 768, kernel_size=(2, 2), stride=(2, 2))
    )
    (upsample_2x): Sequential(
      (0): ConvTranspose2d(768, 768, kernel_size=(2, 2), stride=(2, 2))
    )
    (identity): Identity()
    (downsample_2x): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (decode_head): UPerHead(
    input_transform=multiple_select, ignore_index=255, align_corners=False
    (loss_decode): CrossEntropyLoss(avg_non_ignore=False)
    (conv_seg): Conv2d(768, 4, kernel_size=(1, 1), stride=(1, 1))
    (dropout): Dropout2d(p=0.1, inplace=False)
    (psp_modules): PPM(
      (0): Sequential(
        (0): AdaptiveAvgPool2d(output_size=1)
        (1): ConvModule(
          (conv): Conv2d(768, 768, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
      (1): Sequential(
        (0): AdaptiveAvgPool2d(output_size=2)
        (1): ConvModule(
          (conv): Conv2d(768, 768, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
      (2): Sequential(
        (0): AdaptiveAvgPool2d(output_size=3)
        (1): ConvModule(
          (conv): Conv2d(768, 768, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
      (3): Sequential(
        (0): AdaptiveAvgPool2d(output_size=6)
        (1): ConvModule(
          (conv): Conv2d(768, 768, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): _BatchNormXd(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
    )
    (bottleneck): ConvModule(
      (conv): Conv2d(3840, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): _BatchNormXd(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (activate): ReLU(inplace=True)
    )
    (lateral_convs): ModuleList(
      (0): ConvModule(
        (conv): Conv2d(768, 768, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): _BatchNormXd(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU()
      )
      (1): ConvModule(
        (conv): Conv2d(768, 768, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): _BatchNormXd(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU()
      )
      (2): ConvModule(
        (conv): Conv2d(768, 768, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): _BatchNormXd(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU()
      )
    )
    (fpn_convs): ModuleList(
      (0): ConvModule(
        (conv): Conv2d(768, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): _BatchNormXd(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU()
      )
      (1): ConvModule(
        (conv): Conv2d(768, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): _BatchNormXd(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU()
      )
      (2): ConvModule(
        (conv): Conv2d(768, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): _BatchNormXd(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU()
      )
    )
    (fpn_bottleneck): ConvModule(
      (conv): Conv2d(3072, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): _BatchNormXd(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (activate): ReLU(inplace=True)
    )
  )
  init_cfg={'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
  (auxiliary_head): FCNHead(
    input_transform=None, ignore_index=255, align_corners=False
    (loss_decode): CrossEntropyLoss(avg_non_ignore=False)
    (conv_seg): Conv2d(256, 4, kernel_size=(1, 1), stride=(1, 1))
    (dropout): Dropout2d(p=0.1, inplace=False)
    (convs): Sequential(
      (0): ConvModule(
        (conv): Conv2d(768, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): _BatchNormXd(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
    )
  )
  init_cfg={'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
)
2022-05-31 19:29:35,165 - mmseg - INFO - Loaded 1535 images
2022-05-31 19:29:35,172 - mmseg - INFO - Loaded 304 images
fatal: ambiguous argument 'HEAD': unknown revision or path not in the working tree.
Use '--' to separate paths from revisions, like this:
'git <command> [<revision>...] -- [<file>...]'
Traceback (most recent call last):
  File "tools/train.py", line 240, in <module>
    main()
  File "tools/train.py", line 229, in main
    train_segmentor(
  File "/gpfs/home/likai_stu/mmsegmentation/mmseg/apis/train.py", line 116, in train_segmentor
    model = MMDataParallel(model, device_ids=cfg.gpu_ids)
  File "/gpfs/home/likai_stu/miniconda3/envs/torch/lib/python3.8/site-packages/mmcv/parallel/data_parallel.py", line 35, in __init__
    super(MMDataParallel, self).__init__(*args, dim=dim, **kwargs)
  File "/gpfs/home/likai_stu/miniconda3/envs/torch/lib/python3.8/site-packages/torch/nn/parallel/data_parallel.py", line 145, in __init__
    self.module.to(self.src_device_obj)
  File "/gpfs/home/likai_stu/miniconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/module.py", line 612, in to
    return self._apply(convert)
  File "/gpfs/home/likai_stu/miniconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/module.py", line 359, in _apply
    module._apply(fn)
  File "/gpfs/home/likai_stu/miniconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/module.py", line 359, in _apply
    module._apply(fn)
  File "/gpfs/home/likai_stu/miniconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/module.py", line 359, in _apply
    module._apply(fn)
  File "/gpfs/home/likai_stu/miniconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/module.py", line 381, in _apply
    param_applied = fn(param)
  File "/gpfs/home/likai_stu/miniconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/module.py", line 610, in convert
    return t.to(device, dtype if t.is_floating_point() else None, non_blocking)
RuntimeError: CUDA error: out of memory
